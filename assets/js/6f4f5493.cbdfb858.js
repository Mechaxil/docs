"use strict";(self.webpackChunkmechaxil_docs=self.webpackChunkmechaxil_docs||[]).push([[150],{933:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"projects/solar/firmware","title":"Firmware","description":"This project separates local control (Raspberry Pi Pico) and telemetry (ESP32-C3). Add code in firmware/ and link here.","source":"@site/docs/projects/solar/firmware.md","sourceDirName":"projects/solar","slug":"/solar/firmware","permalink":"/docs/solar/firmware","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"slug":"/solar/firmware","title":"Firmware","sidebar_position":6}}');var s=o(4848),t=o(8453);const i={slug:"/solar/firmware",title:"Firmware",sidebar_position:6},l="Firmware (placeholder)",c={},a=[{value:"Pico (local control)",id:"pico-local-control",level:2},{value:"ESP32-C3 (telemetry)",id:"esp32-c3-telemetry",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"firmware-placeholder",children:"Firmware (placeholder)"})}),"\n",(0,s.jsxs)(r.p,{children:["This project separates ",(0,s.jsx)(r.strong,{children:"local control"})," (Raspberry Pi Pico) and ",(0,s.jsx)(r.strong,{children:"telemetry"})," (ESP32-C3). Add code in ",(0,s.jsx)(r.code,{children:"firmware/"})," and link here."]}),"\n",(0,s.jsx)(r.h2,{id:"pico-local-control",children:"Pico (local control)"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Responsibilities: read sensors, control loads (solenoid/pump), low-power sleep, RTC scheduling, safety cutoff on low battery."}),"\n",(0,s.jsx)(r.li,{children:"Suggested: MicroPython for quick prototyping; C SDK for production performance."}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"TODO:"})," add ",(0,s.jsx)(r.code,{children:"firmware/pico/main.py"})," and API docs."]}),"\n",(0,s.jsx)(r.h2,{id:"esp32-c3-telemetry",children:"ESP32-C3 (telemetry)"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Responsibilities: MQTT/HTTP telemetry, OTA updates, remote dashboard."}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"TODO:"})," add ",(0,s.jsx)(r.code,{children:"firmware/esp32/README.md"})," and sample code."]})]})}function p(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,r,o)=>{o.d(r,{R:()=>i,x:()=>l});var n=o(6540);const s={},t=n.createContext(s);function i(e){const r=n.useContext(t);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(t.Provider,{value:r},e.children)}}}]);